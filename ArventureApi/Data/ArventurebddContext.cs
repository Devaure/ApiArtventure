// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ArventureApi.Models;

namespace ArventureApi.Data
{
    public partial class ArventurebddContext : DbContext
    {
        public ArventurebddContext()
        {
        }

        public ArventurebddContext(DbContextOptions<ArventurebddContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AnimalMechant> AnimalMechants { get; set; }
        public virtual DbSet<Carte> Cartes { get; set; }
        public virtual DbSet<DirectionChemin> DirectionChemins { get; set; }
        public virtual DbSet<EtatPersonnage> EtatPersonnages { get; set; }
        public virtual DbSet<Histoire> Histoires { get; set; }
        public virtual DbSet<Lieu> Lieus { get; set; }
        public virtual DbSet<ObjetTrouve> ObjetTrouves { get; set; }
        public virtual DbSet<TextCookie> TextCookies { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AnimalMechant>(entity =>
            {
                entity.ToTable("animalMechant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameMechant)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nameMechant");
            });

            modelBuilder.Entity<Carte>(entity =>
            {
                entity.ToTable("carte");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("alt");

                entity.Property(e => e.Img)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("img");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<DirectionChemin>(entity =>
            {
                entity.ToTable("directionChemin");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("direction");
            });

            modelBuilder.Entity<EtatPersonnage>(entity =>
            {
                entity.ToTable("etatPersonnage");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Etat)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("etat");
            });

            modelBuilder.Entity<Histoire>(entity =>
            {
                entity.ToTable("histoire");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("content");
            });

            modelBuilder.Entity<Lieu>(entity =>
            {
                entity.ToTable("lieu");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Endroit)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("endroit");
            });

            modelBuilder.Entity<ObjetTrouve>(entity =>
            {
                entity.ToTable("objetTrouve");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Objet)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("objet");
            });

            modelBuilder.Entity<TextCookie>(entity =>
            {
                entity.ToTable("textCookie");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("content");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}